<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on iwakero.com</title><link>/post/</link><description>Recent content in Posts on iwakero.com</description><generator>Hugo -- gohugo.io</generator><language>ja</language><copyright>&amp;copy; Copyright 2020, ryosei iwai</copyright><lastBuildDate>Sun, 21 Mar 2021 14:52:42 +0900</lastBuildDate><atom:link href="/post/index.xml" rel="self" type="application/rss+xml"/><item><title>MySQL 8.0 のロックスケジューラ CATS</title><link>/post/20210321/</link><pubDate>Sun, 21 Mar 2021 14:52:42 +0900</pubDate><guid>/post/20210321/</guid><description>MySQL 8.0.3 にて Innodb の default にされたロックスケジューラ CATS について調べたので、自分なりにまとめてみる
CATS の略 Contention-Aware Transaction Scheduling の略
日本語訳すると、コンテンションを意識したトランザクションスケジューリング。
ロックスケジューラについて ロックスケジューラーは、複数のトランザクションが同一のオブジェクトのロックを取ろうとした時、どれが最初にロックを取るべきかを決定する。
どのトランザクションを優先すべきかはグラフの依存関係の解決が必要であり、NP困難となる例が多い。そのため 8.0 より前の MySQL や多くの database system では、 FIFO(First-In-First-Out)系のアルゴリズムを採用している。要は最初に要求がきたトランザクションにそのロックを与える方式で、これはシンプルである。
CATAS は上記従来のアルゴリズムよりレイテンシーを減少させ、スループットを向上させるアルゴリズムとして提案された。
CATS の仕組み CATS はひとつの単純な直感に基づいている。
「全てのトランザクションは等価ではなく、全てのオブジェクトも等価ではない」
あるトランザクションが既に多くのトランザクションが待っているオブジェクトのロックを取っているなら、そのトランザクションが新たに要求するロックは、優先的に与えられるべきである。何故なら、このようなトランザクションのロックを優先して開放していく事は、全体としてより多くのロックを開放する事に繋がるからである。
例えるなら同じコーヒーの行列に並ぶタクシー運転手とバスの運転手。バスの運転手に優先してコーヒーを提供する事は、結果的により多くの人をより早く目的地に到着させる。
ただし、CATS は常に適用されている訳ではなく、待機しているトランザクションが 32 を超える場合に適用される。この数字はテストによって決定された。
( 確かにパフォーマンス比較をみると、 client 数が 64 を超えない限りは FIFO と CATS に差がない、比較はブログ参照 )
以下、読んでいて感じた疑問と、その解決
疑問1. タクシーの運転手、永遠にコーヒー飲めない問題 個人的疑問としては、この手のスケジューリングの問題として、結果優先度が低いやつが永遠に待たされる問題がよく挙げられる。
と思って調べたら、既にブログで質問がされていた。
===
スタベーションの問題はどう扱っていますか？
例に挙げられているバスとタクシーではバスを優先する事は理にかなっていますが、常にバスのキューが2つ並んでいると、タクシーには順番は回ってきません。このようなケースは自然に解決されますか？
Peter Zaitsev
===
この質問への回答は、
1. バスとタクシーの例はあるが、実際には全てのトランザクションはタクシーである
確かにこれは例えの罠で、トランザクションがロックを取った時点では、そのトランザクションを待っている大量のトランザクションというのは存在しない。時間経過と共に増えていくので、常に大量のトランザクションを待たせた奴が来続けるという状況は多くはないのか。
2. 色々対策のアルゴリズムも入っている
挙げられているものは、
ロックの待機時間が長いトランザクションの優先度を上げる ロックキューに時々バリアを入れて、バリアの前のキューを捌くようにする などなど、今後新たに導入される奴もあるらしい。</description></item><item><title>シンエヴァンゲリオン劇場版</title><link>/post/20210310/</link><pubDate>Wed, 10 Mar 2021 13:30:00 +0900</pubDate><guid>/post/20210310/</guid><description>エヴァンゲリオン新劇場版シリーズも最後、シンエヴァンゲリオン劇場版が上映された。上映も既に3日目、なんとか全ての情報を回避したので、まだ世に共有できない諸々を書いておく事にする。まだパンフレットも他人の考察も読んでいない状態であり、初見の勢いのままに書いている。これは自分自身に「他人の言葉の媒介ではない文章を書いた」と納得させるためである。それくらいにシンエヴァは分かりやすく、恐らく皆が同じ考察を抱くからだ。
シンエヴァは庵野秀明のオトシマエの物語であり、開放の物語だ。
前半、村での描写 シンエヴァの上映時間は2時間超と非常に長く、序盤は作画監督田中将賀の作品みたいな話がずっと続くが、これは明らかに Q で描けなかった内容のオトシマエだ。Q は東日本大震災の影響を強く受けており、その破壊を大きく作中に反映している一方、再生の面については殆ど触れられていない。エヴァQは90分未満で非常に短い作品だが、これは終盤のパートがカットされている事が知られている。恐らくここでやり残した事が破壊と対になる再生、復興の描写である。
人々が復興を進める中で何もせずじっと俯いているシンジは、Q以降会社にも出社できなかった庵野秀明自身だ。それでも「放っておいた方が良い」としてくれる仲間たちや、立ち直らせてくる安野モヨコ氏が見て取れる。レイのそっくりさんが安野モヨコ氏であるとすれば、「私はここでは生きられない、だが生きたかった」という言葉と共に退場する理由も納得できる。彼女はエヴァンゲリオンという構造の外の存在である。彼女は庵野秀明を立ち直らせた時点で役目を果たしており、後は庵野秀明(シンジ)自身がエヴァンゲリオンを完結させるのみだ。
村の描写は、Qのオトシマエであると同時に、庵野秀明がシンエヴァを作るまでの物語だと分かる。
後半 後半はヴィレとネルフの決戦が描かれた後、抽象的な描写の連続へと進んでいく。旧劇と似ているとする人もいるかもしれないが、シンエヴァは全く異なる目的をもった描写である事は明らかだ。
旧劇はエヴァのファンに対し庵野秀明が唾を吐き、虚構から現実へ戻れと訴え、ファンを開放した作品である。ではシンエヴァは何か。それは、自分達作り手側、そして登場人物達を開放する作品だ。シンエヴァは旧劇でやり残した事をやる、庵野秀明の最後のオトシマエだ。
勿論、旧劇を作った当時は庵野秀明自身も、エヴァを終わらせ、解放されたつもりだった。しかし、庵野秀明は新劇場版によってまたエヴァンゲリオンを作ってしまう。「人の言葉は信用できない」と語るゲンドウは正しい。エヴァという IP はファンを突き放した所で終わらない、それは、制作者達自身がまだエヴァンゲリオンを掴んで離していないからである。
ファンを突き放し、自分達でエヴァを終わらせる事は不可能だと知っている。では、誰がこのシリーズを終わらせられるのか。それは、登場人物達自身である。
終盤、神(作者)によって作られた全ての槍は潰され、作者が用意した既定路線としてのフォースインパクトを防ぐ手段は登場人物達には無くなってしまう。しかし彼らは、神の介在しない新たな槍を作り出す事によって、それを阻止する事に成功する。そこから始まるのは、登場人物達の解放の物語だ。
ひとり、またひとりと舞台を降りていき、現実へと解き放たれていく。旧劇にてファンを現実へ帰した彼らが、今度は自らが現実へ出ていく描写は、多少陳腐ではあれど感慨深いものがある。最後のシーン、大人になったシンジは声変わりをしている。シンジは少年期に別れをつげ、声優の緒方恵美も解放する。声優まで解放する徹底ぶりは面白い。
「シンジとマリ、レイとカオル、アスカと…かぁ」と思う気持ちは当然だ。彼らは作者や設定、ファンの解釈からも解放され、現実の存在になっている。だからこそ、誰を相手に選ぶかも自由なのだ。
感想 一本の物語としてはチグハグな出来だが、2回くらい涙が出たシーンがあるので記録用に残しておく
最初にトウジが映るシーン いや、本編1秒やんけって話だが、泣いてしまった。Q にて突き放され続けたシンジに必要なものだと感じだからだ。(シンジ本人は優しさは辛かったらしいが)
ミサトが髪を解くシーン ここであまりのアツさに泣かない人はいないのではないか。Qから散々貯めた、見知ったミサトが帰ってくるシーンだ。そういえば、散々ファンが煽る「行きなさいシンジくん！」についてもフォローが入っているのは、これも庵野秀明のオトシマエっぽいよね。
追記(2021.03.17) 見終わった後は「2回目はどっちでもいいな」と思っていたが、次の日にはまた見たくてたまらなくなってしまい、結局4回見てしまった。
そしてとっておきのネタに気づいた、それが 8+2号機の存在だ。
前作予告で初見時にポカーンとしながら「いや、絶対出てこないだろこいつ…」と思っていたらやっぱり出てこなかった訳だが、実は今回、登場している事に気づいた。
改8がアダムスの器をオーバーラッピングしている最後、なんと8剛毅の左側が赤く染まっている。きれいに左側だけであり、「ここにいたのか、8+2号機…」と4回目で驚いて心の中で爆笑していた。</description></item><item><title>MySQL が結構楽しいなと思い始めた話</title><link>/post/20200711/</link><pubDate>Sat, 11 Jul 2020 15:44:15 +0900</pubDate><guid>/post/20200711/</guid><description>こんなタイトルにすると MySQL ワカル人間になったような印象を受けるが、そんなことはない。まぁ、素直な感想ではある。そんなはなし。
最近のこと インフラ部での仕事も2年目になり、1-6月の半期も終わった。この半年は職場の変化・業務内容の変化が大きい中、成果としては結構満足のいく所だったように思う。
変化としては、大きいのが2点ほど。
職場環境が在宅勤務になった 所属している RDBMS unit の担当業務・自分の判断領域が増えた 在宅勤務については自宅環境を結構整えた事でマイナスが結構少なかった事、意外とプラスの面も多かった事など話はあるが、あまり興味が無いので skip。
RDBMS unit の話 ざっくりな話 最初に unit って何だよという話をすると、チーム横断で専門領域毎に活動するサブチームである。僕は今は RDBMS unit と KVS unit に所属している。
僕は入社するまで MySQL の知識はほとんど無かった訳だが、 Mgr の「Hadoop/Spack 辺り専門らしいから、同じデータ系かなって」との事で MySQL unit に入った。
上の発言は〇されても仕方ない言葉だとは思うが、結果的にグリーの RDBMS unit は強者が集まり育成意識の強い場所であり、新卒には &amp;ldquo;アタリ&amp;rdquo; の場所だと思っている。
MySQL が結構楽しいなと思い始めた話 担当業務が増えた話の背景は自身の成長と言えば気持ちがいいが、大きいのは単純に同unit所属のメンターが昨今の世情もあり国へ帰ってしまったためである。
改めて思う事は実際に手を動かさないと成長しないという所であり、担当したことが無い領域について「知識が……」と思うよりは、とりあえず受けた方が結果が良かった。もちろんこれは、僕が間違った時に正しく訂正してくれる同unitメンバーの存在があるからこそである。
結果として担当業務全般で自身の判断領域が増えた事は手応えとして感じていて、多少見る所が増えた結果、 MySQL にも興味が強まってきた。
MySQL 徹底入門第4版の話 この1年はどちらかと言えば場当たり的というか、必要になった時に必要な知識を身に付けた所が多く、チーズのように穴だらけな知識体系になっている事を自覚している。
上記の流れがあり、もう少し体系的に知りたい欲が出たので最近は これ を読んでいる。
特に6章が読んでいて面白く、過去にあった業務が所々頭に浮かび、「あぁ、同じことを確かやったなぁ」「あの指示はそういう事だったのか」とポコポコ出てくるのも楽しい。これは実際に業務を経験したが上の体験だと思うので、今読めて良かったと思う。
おわり ちょっとダラダラ書いてしまったので、最後に関係ない話をすると。
実は、 https になりました。</description></item><item><title>外出できないのでサイトを作ってみた</title><link>/post/20200430/</link><pubDate>Thu, 30 Apr 2020 01:51:03 +0900</pubDate><guid>/post/20200430/</guid><description>最近のこと 大学院卒業前にせっかく作った hatena blog も就職後はロクに更新もせず、無人広告塔に成り果ててしまった。仕事は楽しく非常に勉強にもなっているが、自分だけの勉強はこの1年どうだったかと言うと難しい。
そこで、GW 初日にまた自分のサイトを作ってみた。理由としては、やはりインフラエンジニアとして勉強を重ねるなら、やはり自分の環境は必要であると言うことが身にしみて分かったからだ。重ねて、新卒採用の面談などを繰り返す内に徐々に自分の知らない web フレームワークが増えていたので、流石に触れていこうと触発されたのもある。
と言う事で、この記事では本web siteの構成について軽く触れる。
web site を作ってみたこと 構成 構成は最初はシンプルにしようと、数時間で作れる構成とした。
https://github.com/zensai3805/iwakero-web
HUGO で生成した静的ファイルを github 上の Action で build し、そのまま Google Cloud Storage へ Upload している。action の yml は以下だ。
https://github.com/zensai3805/iwakero-web/blob/master/.github/workflows/delivery.yml
web front をさっくり用意したかった事、 github action で CD を触ってみたかった事、今後 GCP(GKE) にも手を伸ばそうという事で、最低限の要素を押さえてみた。
感想 感想としては、素直に楽しい。リポジトリへ push から始まり流れていく様は気持ちがよく、何より簡単だ。
今後の予定としては、
hugo はそもそも自分で deploy をする仕組みがあるので、 gsutil から移行する https へ対応する CSS まわり調整する hugo はtheme内の file を override する機能があるが、上手くいっていない Google Cloud Storage からもう少し複雑な構成を試してみる。(目的も勉強だし) 更新する環境や体制をもう少しよくしようー と言った所だ。</description></item><item><title>Hello</title><link>/post/hello/</link><pubDate>Wed, 29 Apr 2020 21:20:08 +0900</pubDate><guid>/post/hello/</guid><description>first post.</description></item></channel></rss>